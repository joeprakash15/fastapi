#sonar-deployment.yaml file  
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sonarqube
  name: sonarqube
spec:
  selector:
    matchLabels:
      app: sonarqube
  replicas: 1
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      containers:
        - name: sonarqube
          image: sonarqube:7.1
          env:
          - name: "SONARQUBE_JDBC_USERNAME"
            valueFrom:
               secretKeyRef:
                 name: postgres-secrets
                 key: username
          - name: "SONARQUBE_JDBC_URL"
            valueFrom:
              configMapKeyRef:
                name: sonar-config
                key: url
          - name: "SONARQUBE_JDBC_PASSWORD"
            valueFrom:
               secretKeyRef:
                 name: postgres-secrets
                 key: password
          ports:
          - containerPort: 9000
            protocol: TCP
---
# sonar-service.yml file we expose it to the Node Port (30001) as a service
apiVersion: v1
kind: Service
metadata:
  labels:
    app: sonarqube
  name: sonarqube
spec:
  ports:
    - name: sonar
      port: 9000
      protocol: TCP
      targetPort: 9000
      nodePort: 30001
  selector:
    app: sonarqube
  type: NodePort
---
#sonar configmap.yml file
apiVersion: v1
kind: ConfigMap
metadata:
  name: sonar-config
  labels:
    app: postgres
data:
  url: jdbc:postgresql://postgres:5432/postgres
---
#postgres secret.yaml file 

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
type: Opaque
data:
  username: cG9zdGdyZXNhZG1pbg==   #echo -n "postgresadmin" | base64
  password: YWRtaW4xMjM=           #echo -n "admin123" | base64
---
#postgres storage.yml file

kind: PersistentVolume
apiVersion: v1
metadata:
  name: postgres-pv-volume
  labels:
    type: local
    app: postgres
spec:
  storageClassName: manual
  capacity:
    storage: 250Mi
  accessModes:
    - ReadWriteMany
  hostPath:
    path: "/mnt/data"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: postgres-pv-claim
  labels:
    app: postgres
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 250Mi
---
# postgres deployment.yaml file
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  selector:
    matchLabels:
      app: postgres
  replicas: 1
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:10.4
          imagePullPolicy: "IfNotPresent"
          ports:
            - containerPort: 5432
          env:
           - name: POSTGRES_USER
             valueFrom:
               secretKeyRef:
                 name: postgres-secrets
                 key: username
           - name: POSTGRES_PASSWORD
             valueFrom:
               secretKeyRef:
                 name: postgres-secrets
                 key: password
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgredb
      volumes:
        - name: postgredb
          persistentVolumeClaim:
            claimName: postgres-pv-claim
---
#postgres service.yaml file 

apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
spec:
  type: NodePort
  ports:
   - port: 5432
  selector:
   app: postgres

